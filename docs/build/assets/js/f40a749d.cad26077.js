"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[339],{6901:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var n=t(11),o=(t(2735),t(9530));const s={},a="Cross-process communication",c={unversionedId:"developers/architecture/browser-cross-process-communication",id:"developers/architecture/browser-cross-process-communication",title:"Cross-process communication",description:"@php-wasm/web uses the Comlink library to turns the one-way postMessage available in JavaScript into a two-way communication channel.",source:"@site/docs/developers/23-architecture/14-browser-cross-process-communication.md",sourceDirName:"developers/23-architecture",slug:"/developers/architecture/browser-cross-process-communication",permalink:"/wordpress-playground/developers/architecture/browser-cross-process-communication",draft:!1,editUrl:"https://github.com/WordPress/wordpress-playground/tree/trunk/packages/docs/site/docs/developers/23-architecture/14-browser-cross-process-communication.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{},sidebar:"developersSidebar",previous:{title:"Scopes",permalink:"/wordpress-playground/developers/architecture/browser-scopes"},next:{title:"WordPress support",permalink:"/wordpress-playground/developers/architecture/wordpress"}},i={},p=[],l={toc:p},u="wrapper";function m(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cross-process-communication"},"Cross-process communication"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@php-wasm/web")," uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/GoogleChromeLabs/comlink"},"Comlink")," library to turns the one-way ",(0,o.kt)("inlineCode",{parentName:"p"},"postMessage")," available in JavaScript into a two-way communication channel."),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"postMessage")," sounds unfamiliar, it's what JavaScript threads use to communicate. Please review the ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"},"MDN Docs")," before continuing."),(0,o.kt)("p",null,"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"postMessage")," does not offer any request/response mechanics. You may send messages to another thread and you may independently receive messages from it, but you can't send a message and await a response to that specific message."),(0,o.kt)("p",null,"To quote the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/GoogleChromeLabs/comlink"},"Comlink")," library documentation:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"main.js")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as Comlink from 'https://unpkg.com/comlink/dist/esm/comlink.mjs';\nasync function init() {\n    const worker = new Worker('worker.js');\n    // WebWorkers use `postMessage` and therefore work with Comlink.\n    const obj = Comlink.wrap(worker);\n    alert(`Counter: ${await obj.counter}`);\n    await obj.inc();\n    alert(`Counter: ${await obj.counter}`);\n}\ninit();\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"worker.js")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"importScripts('https://unpkg.com/comlink/dist/umd/comlink.js');\n\nconst obj = {\n    counter: 0,\n    inc() {\n        this.counter++;\n    },\n};\n\nComlink.expose(obj);\n")))}m.isMDXComponent=!0},9530:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>f});var n=t(2735);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),p=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},l=function(e){var r=p(e.components);return n.createElement(i.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||s;return t?n.createElement(f,a(a({ref:r},l),{},{components:t})):n.createElement(f,a({ref:r},l))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=d;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var p=2;p<s;p++)a[p]=t[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);